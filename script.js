// Dados das perguntas organizadas por categoria
const questions = [
    {
        category: "Organiza√ß√£o e Carga de Trabalho",
        questions: [
            "Consigo realizar todas as minhas tarefas dentro do hor√°rio de trabalho.",
            "O volume de trabalho permite que eu mantenha meu descanso e minha vida pessoal equilibrados.",
            "As metas da empresa s√£o realistas e poss√≠veis de atingir.",
            "Recebo apoio quando enfrento dificuldades nas tarefas.",
            "Meu hor√°rio de trabalho √© respeitado, sem necessidade de horas extras frequentes.",
            "O ambiente f√≠sico favorece minha concentra√ß√£o e conforto."
        ]
    },
    {
        category: "Comunica√ß√£o e Clima Organizacional",
        questions: [
            "Recebo informa√ß√µes claras sobre o que √© esperado do meu trabalho.",
            "Tenho liberdade para expressar d√∫vidas ou opini√µes.",
            "Sinto que posso contar com meu gestor quando tenho dificuldades.",
            "H√° um canal seguro para dar sugest√µes ou relatar problemas.",
            "Mudan√ßas e decis√µes s√£o comunicadas com anteced√™ncia."
        ]
    },
    {
        category: "Reconhecimento e Valoriza√ß√£o",
        questions: [
            "Meu esfor√ßo √© reconhecido pela lideran√ßa.",
            "Minhas ideias e contribui√ß√µes s√£o valorizadas.",
            "O feedback que recebo √© construtivo e respeitoso.",
            "Os crit√©rios para reconhecimento ou promo√ß√£o s√£o justos e claros."
        ]
    },
    {
        category: "Autonomia e Participa√ß√£o",
        questions: [
            "Tenho liberdade para propor melhorias no meu trabalho.",
            "Posso ajustar minha forma de trabalhar (hor√°rios ou m√©todos) quando necess√°rio.",
            "Sou envolvido(a) em decis√µes que afetam diretamente minha rotina."
        ]
    },
    {
        category: "Sa√∫de Mental e Suporte",
        questions: [
            "Sinto prazer e motiva√ß√£o ao realizar minhas atividades.",
            "Tenho energia e bem-estar emocional para lidar com as demandas do trabalho.",
            "A empresa promove a√ß√µes de cuidado e bem-estar (pausas, integra√ß√£o, apoio).",
            "Consigo equilibrar bem o trabalho e a vida pessoal."
        ]
    }
];

// Op√ß√µes da escala Likert
const likertOptions = [
    { value: 1, label: "Nunca", emoji: "1Ô∏è‚É£" },
    { value: 2, label: "Raramente", emoji: "2Ô∏è‚É£" },
    { value: 3, label: "√Äs vezes", emoji: "3Ô∏è‚É£" },
    { value: 4, label: "Frequentemente", emoji: "4Ô∏è‚É£" },
    { value: 5, label: "Sempre", emoji: "5Ô∏è‚É£" }
];

// Vari√°veis globais
let currentStep = 0;
let currentQuestionIndex = 0;
let answers = {};
let totalQuestions = 0;
let currentSection = 'home';

// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    // Calcular total de perguntas
    totalQuestions = questions.reduce((total, category) => total + category.questions.length, 0);
    
    // Inicializar respostas
    for (let i = 0; i < totalQuestions; i++) {
        answers[i] = null;
    }
    
    // Configurar navega√ß√£o
    setupNavigation();
});

// Configurar navega√ß√£o entre se√ß√µes
function setupNavigation() {
    // Navega√ß√£o do menu
    document.querySelectorAll('.nav-menu a').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const target = this.getAttribute('href').substring(1);
            showSection(target);
        });
    });
    
    // Bot√µes CTA
    document.querySelectorAll('a[href="#diagnostico"]').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            showSection('diagnostico');
        });
    });
}

// Mostrar se√ß√£o espec√≠fica
function showSection(sectionId) {
    // Esconder todas as se√ß√µes
    document.querySelectorAll('.page-section').forEach(section => {
        section.classList.remove('active');
    });
    
    // Mostrar se√ß√£o atual
    const targetSection = document.getElementById(sectionId + '-section');
    if (targetSection) {
        targetSection.classList.add('active');
        currentSection = sectionId;
        
        // Se for a se√ß√£o de diagn√≥stico, iniciar o processo
        if (sectionId === 'diagnostico') {
            startEvaluation();
        }
    }
}

// Fun√ß√£o para iniciar a avalia√ß√£o
function startEvaluation() {
    // Mostrar apenas o formul√°rio dentro da se√ß√£o de diagn√≥stico
    const diagnosticoSection = document.getElementById('diagnostico-section');
    diagnosticoSection.innerHTML = `
        <div class="form-container">
            <div class="form-header">
                <h2>üß≠ Question√°rio de Bem-Estar no Trabalho</h2>
                <div class="progress-bar">
                    <div class="progress-fill" id="progress-fill"></div>
                </div>
                <p class="progress-text" id="progress-text">Etapa 1 de 3</p>
            </div>

            <!-- Informa√ß√µes B√°sicas -->
            <div id="basic-info-step" class="form-step">
                <h3>Informa√ß√µes B√°sicas (Opcionais)</h3>
                <p class="step-description">Estas informa√ß√µes s√£o opcionais e podem ser omitidas para manter o anonimato</p>
                
                <div class="form-group">
                    <label for="nome">Nome (opcional)</label>
                    <input type="text" id="nome" name="nome" placeholder="Seu nome completo">
                </div>
                
                <div class="form-group">
                    <label for="cargo">Cargo (opcional)</label>
                    <input type="text" id="cargo" name="cargo" placeholder="Seu cargo na empresa">
                </div>
                
                <div class="form-group">
                    <label for="setor">Setor (opcional)</label>
                    <select id="setor" name="setor">
                        <option value="">Selecione o setor</option>
                        <option value="administrativo">Administrativo</option>
                        <option value="comercial">Comercial</option>
                        <option value="financeiro">Financeiro</option>
                        <option value="marketing">Marketing</option>
                        <option value="operacional">Operacional</option>
                        <option value="recursos-humanos">Recursos Humanos</option>
                        <option value="tecnologia">Tecnologia</option>
                        <option value="vendas">Vendas</option>
                        <option value="outros">Outros</option>
                    </select>
                </div>
                
                <div class="privacy-notice">
                    <p><strong>Importante:</strong> Todas as informa√ß√µes s√£o opcionais. Voc√™ pode responder o question√°rio de forma completamente an√¥nima se preferir.</p>
                </div>
            </div>

            <!-- Question√°rio -->
            <div id="questionnaire-step" class="form-step" style="display: none;">
                <div id="question-container">
                    <!-- Perguntas ser√£o inseridas dinamicamente aqui -->
                </div>
            </div>

            <!-- Resumo -->
            <div id="summary-step" class="form-step" style="display: none;">
                <h3>Resumo do Diagn√≥stico</h3>
                <p>Revise as informa√ß√µes antes de finalizar</p>
                
                <div id="summary-content">
                    <!-- Resumo ser√° inserido dinamicamente aqui -->
                </div>
                
                <div class="consent-section">
                    <h4>Consentimento para Processamento de Dados</h4>
                    <p>Ao finalizar este diagn√≥stico, voc√™ concorda que os dados fornecidos sejam processados para gerar o relat√≥rio de avalia√ß√£o conforme nossa Pol√≠tica de Privacidade. Os dados s√£o mantidos por 12 meses e podem ser exclu√≠dos a qualquer momento.</p>
                </div>
            </div>

            <div class="form-navigation">
                <button type="button" class="btn btn-secondary" id="prev-btn" onclick="previousStep()" style="display: none;">
                    <i class="fas fa-arrow-left"></i>
                    Anterior
                </button>
                <button type="button" class="btn btn-primary" id="next-btn" onclick="nextStep()">
                    Pr√≥xima
                    <i class="fas fa-arrow-right"></i>
                </button>
                <button type="button" class="btn btn-success" id="submit-btn" onclick="submitForm()" style="display: none;">
                    <i class="fas fa-check"></i>
                    Finalizar Diagn√≥stico
                </button>
            </div>
        </div>
    `;
    
    showStep(0);
}

// Fun√ß√£o para mostrar uma etapa espec√≠fica
function showStep(step) {
    currentStep = step;
    
    // Esconder todas as etapas
    document.getElementById('basic-info-step').style.display = 'none';
    document.getElementById('questionnaire-step').style.display = 'none';
    document.getElementById('summary-step').style.display = 'none';
    
    // Mostrar etapa atual
    if (step === 0) {
        document.getElementById('basic-info-step').style.display = 'block';
    } else if (step === 1) {
        document.getElementById('questionnaire-step').style.display = 'block';
        showQuestion(0);
    } else if (step === 2) {
        document.getElementById('summary-step').style.display = 'block';
        showSummary();
    }
    
    // Atualizar barra de progresso
    updateProgress();
    
    // Atualizar bot√µes de navega√ß√£o
    updateNavigationButtons();
}

// Fun√ß√£o para mostrar uma pergunta espec√≠fica
function showQuestion(index) {
    const container = document.getElementById('question-container');
    const questionData = getQuestionData(index);
    
    if (!questionData) return;
    
    container.innerHTML = `
        <div class="question">
            <h3>${questionData.question}</h3>
            <div class="options">
                ${likertOptions.map(option => `
                    <div class="option" onclick="selectAnswer(${index}, ${option.value})">
                        <input type="radio" name="question_${index}" value="${option.value}" 
                               ${answers[index] === option.value ? 'checked' : ''}>
                        <label>
                            <span class="emoji">${option.emoji}</span>
                            <span class="text">${option.label}</span>
                        </label>
                    </div>
                `).join('')}
            </div>
        </div>
    `;
    
    // Atualizar barra de progresso
    updateProgress();
    
    // Atualizar bot√µes de navega√ß√£o
    updateNavigationButtons();
}

// Fun√ß√£o para obter dados da pergunta pelo √≠ndice
function getQuestionData(index) {
    let currentIndex = 0;
    
    for (let categoryIndex = 0; categoryIndex < questions.length; categoryIndex++) {
        const category = questions[categoryIndex];
        
        for (let questionIndex = 0; questionIndex < category.questions.length; questionIndex++) {
            if (currentIndex === index) {
                return {
                    category: category.category,
                    question: category.questions[questionIndex],
                    categoryIndex: categoryIndex,
                    questionIndex: questionIndex
                };
            }
            currentIndex++;
        }
    }
    
    return null;
}

// Fun√ß√£o para selecionar uma op√ß√£o
function selectAnswer(questionIndex, value) {
    answers[questionIndex] = value;
    
    // Atualizar visual da sele√ß√£o
    const options = document.querySelectorAll('.option');
    options.forEach(option => {
        option.classList.remove('selected');
        const input = option.querySelector('input');
        if (input && input.value == value) {
            option.classList.add('selected');
        }
    });
    
    // Atualizar barra de progresso
    updateProgress();
    
    // Atualizar bot√µes de navega√ß√£o
    updateNavigationButtons();
}

// Fun√ß√£o para atualizar barra de progresso
function updateProgress() {
    const progressFill = document.getElementById('progress-fill');
    const progressText = document.getElementById('progress-text');
    
    if (!progressFill || !progressText) return;
    
    let percentage = 0;
    let text = '';
    
    if (currentStep === 0) {
        percentage = 33;
        text = 'Etapa 1 de 3';
    } else if (currentStep === 1) {
        // Calcular progresso baseado nas perguntas respondidas
        const answeredQuestions = Object.values(answers).filter(answer => answer !== null).length;
        percentage = 33 + (answeredQuestions / totalQuestions) * 33;
        text = `Pergunta ${currentQuestionIndex + 1} de ${totalQuestions}`;
    } else if (currentStep === 2) {
        percentage = 100;
        text = 'Etapa 3 de 3';
    }
    
    progressFill.style.width = percentage + '%';
    progressText.textContent = text;
}

// Fun√ß√£o para atualizar bot√µes de navega√ß√£o
function updateNavigationButtons() {
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const submitBtn = document.getElementById('submit-btn');
    
    if (!prevBtn || !nextBtn || !submitBtn) return;
    
    // Bot√£o anterior
    if (currentStep === 0) {
        prevBtn.style.display = 'none';
    } else {
        prevBtn.style.display = 'flex';
    }
    
    // Bot√£o pr√≥xima/submit
    if (currentStep === 2) {
        nextBtn.style.display = 'none';
        submitBtn.style.display = 'flex';
    } else {
        nextBtn.style.display = 'flex';
        submitBtn.style.display = 'none';
    }
    
    // Verificar se pode avan√ßar
    const canProceed = canProceedToNext();
    nextBtn.disabled = !canProceed;
    submitBtn.disabled = !canProceed;
}

// Fun√ß√£o para verificar se pode avan√ßar
function canProceedToNext() {
    if (currentStep === 0) {
        return true; // Informa√ß√µes b√°sicas s√£o opcionais
    } else if (currentStep === 1) {
        return answers[currentQuestionIndex] !== null;
    } else if (currentStep === 2) {
        return true; // Resumo sempre pode ser finalizado
    }
    return true;
}

// Fun√ß√£o para pr√≥xima etapa
function nextStep() {
    if (currentStep < 2) {
        if (currentStep === 1) {
            // Se estamos no question√°rio, avan√ßar para pr√≥xima pergunta
            if (currentQuestionIndex < totalQuestions - 1) {
                currentQuestionIndex++;
                showQuestion(currentQuestionIndex);
                updateProgress();
            } else {
                // Se terminamos todas as perguntas, ir para resumo
                showStep(2);
            }
        } else {
            showStep(currentStep + 1);
        }
    }
}

// Fun√ß√£o para etapa anterior
function previousStep() {
    if (currentStep > 0) {
        if (currentStep === 1) {
            // Se estamos no question√°rio, voltar para pergunta anterior
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                showQuestion(currentQuestionIndex);
                updateProgress();
            } else {
                // Se estamos na primeira pergunta, voltar para informa√ß√µes b√°sicas
                showStep(0);
            }
        } else {
            showStep(currentStep - 1);
        }
    }
}

// Fun√ß√£o para mostrar resumo
function showSummary() {
    const summaryContent = document.getElementById('summary-content');
    
    // Coletar informa√ß√µes b√°sicas
    const nome = document.getElementById('nome').value;
    const cargo = document.getElementById('cargo').value;
    const setor = document.getElementById('setor').value;
    
    let summaryHTML = '';
    
    // Informa√ß√µes b√°sicas (se preenchidas)
    if (nome || cargo || setor) {
        summaryHTML += `
            <div class="summary-section">
                <h4>Informa√ß√µes Pessoais</h4>
                <p><strong>Nome:</strong> ${nome || 'N√£o informado'}</p>
                <p><strong>Cargo:</strong> ${cargo || 'N√£o informado'}</p>
                <p><strong>Setor:</strong> ${setor || 'N√£o informado'}</p>
            </div>
        `;
    }
    
    // Resumo das respostas
    const answeredQuestions = Object.values(answers).filter(answer => answer !== null).length;
    summaryHTML += `
        <div class="summary-section">
            <h4>Question√°rio</h4>
            <p><strong>${answeredQuestions}</strong> de <strong>${totalQuestions}</strong> perguntas respondidas</p>
        </div>
    `;
    
    summaryContent.innerHTML = summaryHTML;
}

// Fun√ß√£o para submeter o formul√°rio
function submitForm() {
    // Verificar se todas as perguntas foram respondidas
    const unansweredQuestions = Object.values(answers).filter(answer => answer === null);
    
    if (unansweredQuestions.length > 0) {
        alert('Por favor, responda todas as perguntas antes de finalizar o diagn√≥stico.');
        return;
    }
    
    // Calcular resultados
    const results = calculateResults();
    
    // Salvar dados no GitHub
    saveDiagnosticData(results);
    
    // Mostrar resultados
    showResults(results);
}

// Fun√ß√£o para salvar dados do diagn√≥stico no GitHub
async function saveDiagnosticData(results) {
    try {
        // Criar novo diagn√≥stico
        const newDiagnostic = {
            id: Date.now(), // ID √∫nico baseado em timestamp
            data: new Date().toLocaleDateString('pt-BR'),
            hora: new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }),
            timestamp: new Date().toISOString(),
            pontuacaoGeral: results.overallScore,
            nivelRisco: results.riskLevel,
            nivelRiscoLabel: results.riskLabel,
            porcentagemRisco: results.riskPercentage,
            pontuacoesPorCategoria: results.categoryAverages,
            recomendacoes: results.recommendations,
            respostasDetalhadas: answers,
            informacoes: {
                nome: document.getElementById('nome').value || '',
                cargo: document.getElementById('cargo').value || '',
                setor: document.getElementById('setor').value || ''
            }
        };
        
        // Salvar no GitHub
        await saveToGitHub(newDiagnostic);
        
        console.log('Diagn√≥stico salvo no GitHub com sucesso!');
        
    } catch (error) {
        console.error('Erro ao salvar diagn√≥stico:', error);
        alert('Erro ao salvar dados. Tente novamente.');
    }
}

// Fun√ß√£o para obter token do GitHub
async function getGitHubToken() {
    // Verificar se j√° temos o token salvo
    let token = localStorage.getItem('github_token');
    
    if (!token) {
        // Solicitar token do usu√°rio
        const tokenInput = prompt(
            'üîê Token do GitHub necess√°rio\n\n' +
            'Para salvar os diagn√≥sticos no GitHub, voc√™ precisa de um token de acesso.\n\n' +
            'Como obter:\n' +
            '1. Acesse: https://github.com/settings/tokens\n' +
            '2. Clique em "Generate new token (classic)"\n' +
            '3. Selecione a permiss√£o "repo"\n' +
            '4. Copie o token gerado\n\n' +
            'Digite seu token abaixo:'
        );
        
        if (!tokenInput) {
            throw new Error('Token do GitHub √© necess√°rio para salvar os dados');
        }
        
        // Validar formato do token
        if (!tokenInput.startsWith('ghp_') && !tokenInput.startsWith('gho_') && !tokenInput.startsWith('ghu_')) {
            throw new Error('Token inv√°lido. Deve come√ßar com ghp_, gho_ ou ghu_');
        }
        
        token = tokenInput;
        // Salvar no localStorage para pr√≥ximas vezes
        localStorage.setItem('github_token', token);
        
        // Mostrar confirma√ß√£o
        alert('‚úÖ Token configurado com sucesso! Ser√° salvo para pr√≥ximas sess√µes.');
    }
    
    return token;
}

// Fun√ß√£o para salvar no GitHub via API
async function saveToGitHub(diagnostic) {
    try {
        // Obter token do GitHub
        const token = await getGitHubToken();
        
        // Configura√ß√µes do GitHub
        const owner = 'karla'; // Seu usu√°rio do GitHub
        const repo = 'Burn_In'; // Nome do reposit√≥rio
        const fileName = `diagnostico-${diagnostic.id}.json`;
        const path = `data/${fileName}`;
        
        // Criar conte√∫do do arquivo
        const content = JSON.stringify(diagnostic, null, 2);
        
        // Salvar no GitHub
        const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${path}`, {
            method: 'PUT',
            headers: {
                'Authorization': `token ${token}`,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: `Novo diagn√≥stico - ${diagnostic.data}`,
                content: btoa(content) // Codificar em base64
            })
        });
        
        if (!response.ok) {
            throw new Error('Erro ao salvar no GitHub');
        }
        
        console.log('Dados salvos no GitHub com sucesso!');
        
    } catch (error) {
        console.error('Erro ao salvar no GitHub:', error);
        throw error;
    }
}

// Fun√ß√£o para calcular resultados
function calculateResults() {
    const results = {
        overallScore: 0,
        categoryScores: {},
        categoryAverages: {},
        riskLevel: '',
        recommendations: []
    };
    
    let totalScore = 0;
    let questionCount = 0;
    
    // Calcular pontua√ß√£o por categoria
    let currentIndex = 0;
    
    questions.forEach((category, categoryIndex) => {
        let categoryScore = 0;
        let categoryQuestionCount = 0;
        
        category.questions.forEach((question, questionIndex) => {
            const answer = answers[currentIndex];
            categoryScore += answer;
            totalScore += answer;
            questionCount++;
            categoryQuestionCount++;
            currentIndex++;
        });
        
        results.categoryScores[category.category] = categoryScore;
        results.categoryAverages[category.category] = categoryScore / categoryQuestionCount;
    });
    
    // Calcular m√©dia geral
    results.overallScore = totalScore / questionCount;
    
    // Determinar n√≠vel de risco conforme nova escala
    if (results.overallScore >= 4.0) {
        results.riskLevel = 'low';
        results.riskLabel = 'Clima saud√°vel e equilibrado';
        results.riskPercentage = Math.round((results.overallScore / 5) * 100);
    } else if (results.overallScore >= 3.0) {
        results.riskLevel = 'medium';
        results.riskLabel = 'Pontos de aten√ß√£o ‚Äî fatores de estresse presentes';
        results.riskPercentage = Math.round((results.overallScore / 5) * 100);
    } else {
        results.riskLevel = 'high';
        results.riskLabel = 'Risco alto de estresse e burnout ‚Äî requer plano de a√ß√£o';
        results.riskPercentage = Math.round((results.overallScore / 5) * 100);
    }
    
    // Gerar recomenda√ß√µes baseadas nas categorias com menor pontua√ß√£o
    results.recommendations = generateRecommendations(results.categoryAverages);
    
    return results;
}

// Fun√ß√£o para gerar recomenda√ß√µes
function generateRecommendations(categoryAverages) {
    const recommendations = [];
    
    // Ordenar categorias por pontua√ß√£o (menor primeiro)
    const sortedCategories = Object.entries(categoryAverages)
        .sort(([,a], [,b]) => a - b);
    
    // Gerar recomenda√ß√µes para as 3 categorias com menor pontua√ß√£o
    sortedCategories.slice(0, 3).forEach(([category, average]) => {
        if (average < 3.0) {
            recommendations.push(getRecommendationForCategory(category, average));
        }
    });
    
    return recommendations;
}

// Fun√ß√£o para obter recomenda√ß√£o espec√≠fica por categoria
function getRecommendationForCategory(category, average) {
    const recommendations = {
        "Organiza√ß√£o e Carga de Trabalho": "Revisar a distribui√ß√£o de tarefas, estabelecer metas realistas, respeitar hor√°rios de trabalho e criar ambiente f√≠sico adequado para concentra√ß√£o e conforto.",
        "Comunica√ß√£o e Clima Organizacional": "Estabelecer canais claros de comunica√ß√£o, promover transpar√™ncia nas decis√µes, criar ambiente seguro para express√£o de opini√µes e comunicar mudan√ßas com anteced√™ncia.",
        "Reconhecimento e Valoriza√ß√£o": "Implementar sistema de reconhecimento regular, valorizar ideias e contribui√ß√µes, fornecer feedback construtivo e estabelecer crit√©rios claros para promo√ß√µes.",
        "Autonomia e Participa√ß√£o": "Delegar mais responsabilidades, permitir flexibilidade nos m√©todos de trabalho, envolver colaboradores em decis√µes que afetam sua rotina e promover inova√ß√£o.",
        "Sa√∫de Mental e Suporte": "Implementar programas de bem-estar corporativo, oferecer suporte psicol√≥gico, promover a√ß√µes de cuidado e integra√ß√£o, e facilitar o equil√≠brio entre trabalho e vida pessoal."
    };
    
    return recommendations[category] || "Focar em melhorias espec√≠ficas nesta √°rea para aumentar a satisfa√ß√£o e bem-estar dos colaboradores.";
}

// Fun√ß√£o para mostrar resultados
function showResults(results) {
    const diagnosticoSection = document.getElementById('diagnostico-section');
    diagnosticoSection.innerHTML = `
        <div class="results-container">
            <div class="results-header">
                <h2>Resultado do Diagn√≥stico</h2>
                <p>An√°lise completa da sa√∫de mental corporativa</p>
            </div>

            <div class="score-display">
                <div class="score-circle">
                    <span id="score-percentage">${results.riskPercentage}%</span>
                </div>
                <div class="score-info">
                    <h3 id="risk-level">${results.riskLabel}</h3>
                    <p id="risk-description">${getRiskDescription(results.riskLevel, results.overallScore)}</p>
                </div>
            </div>

            <div class="result-summary" id="result-summary">
                <h3>Diagn√≥stico Geral</h3>
                <p><strong>Pontua√ß√£o M√©dia:</strong> ${results.overallScore.toFixed(2)}/5.0</p>
                <p><strong>N√≠vel de Risco:</strong> ${results.riskLabel}</p>
                
                <h4 style="margin-top: 20px;">An√°lise por Categoria:</h4>
                <div style="margin-top: 15px;">
                    ${Object.entries(results.categoryAverages).map(([category, average]) => `
                        <div style="display: flex; justify-content: space-between; margin-bottom: 8px; padding: 8px; background: white; border-radius: 8px;">
                            <span><strong>${category}:</strong></span>
                            <span>${average.toFixed(2)}/5.0</span>
                        </div>
                    `).join('')}
                </div>
            </div>

            <div class="recommendations" id="recommendations">
                <h3>Recomenda√ß√µes Priorit√°rias</h3>
                ${results.recommendations.map(rec => `
                    <div class="recommendation-item">
                        <i class="fas fa-lightbulb"></i>
                        <div>
                            <strong>${rec}</strong>
                        </div>
                    </div>
                `).join('')}
            </div>

            <div class="action-buttons">
                <button class="btn btn-primary" onclick="downloadReport()">
                    <i class="fas fa-download"></i>
                    Baixar Relat√≥rio
                </button>
                <button class="btn btn-secondary" onclick="sendToHR()">
                    <i class="fas fa-envelope"></i>
                    Enviar ao RH
                </button>
                <button class="btn btn-outline" onclick="manageGitHubToken()">
                    <i class="fas fa-cog"></i>
                    Configurar GitHub
                </button>
                <button class="btn btn-outline" onclick="restartEvaluation()">
                    <i class="fas fa-redo"></i>
                    Nova Avalia√ß√£o
                </button>
            </div>
        </div>
    `;
}

// Fun√ß√£o para obter descri√ß√£o do risco
function getRiskDescription(riskLevel, score) {
    if (riskLevel === 'low') {
        return "Parab√©ns! Sua empresa demonstra um clima saud√°vel e equilibrado. Continue mantendo essas pr√°ticas positivas e monitore regularmente para garantir a sustentabilidade do ambiente de trabalho.";
    } else if (riskLevel === 'medium') {
        return "Sua empresa apresenta pontos de aten√ß√£o com fatores de estresse presentes. √â importante implementar melhorias nas √°reas identificadas para prevenir problemas futuros e aumentar a satisfa√ß√£o dos colaboradores.";
    } else {
        return "‚ö†Ô∏è ATEN√á√ÉO: Sua empresa apresenta risco alto de estresse e burnout. √â fundamental implementar um plano de a√ß√£o imediato para melhorar o ambiente de trabalho e prevenir problemas de sa√∫de mental dos colaboradores.";
    }
}

// Fun√ß√£o para baixar relat√≥rio
function downloadReport() {
    const results = calculateResults();
    const reportData = generateReportData(results);
    
    // Criar e baixar arquivo JSON
    const dataStr = JSON.stringify(reportData, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `relatorio-catalise-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    alert('Relat√≥rio baixado com sucesso!');
}

// Fun√ß√£o para gerar dados do relat√≥rio
function generateReportData(results) {
    const nome = document.getElementById('nome').value;
    const cargo = document.getElementById('cargo').value;
    const setor = document.getElementById('setor').value;
    
    return {
        empresa: "Diagn√≥stico NR-1 Burn In",
        data: new Date().toLocaleDateString('pt-BR'),
        informacoes: {
            nome: nome || 'An√¥nimo',
            cargo: cargo || 'N√£o informado',
            setor: setor || 'N√£o informado'
        },
        pontuacaoGeral: results.overallScore,
        nivelRisco: results.riskLabel,
        porcentagemRisco: results.riskPercentage,
        pontuacoesPorCategoria: results.categoryAverages,
        recomendacoes: results.recommendations,
        respostasDetalhadas: answers,
        interpretacao: {
            "‚â• 4,0": "Clima saud√°vel e equilibrado",
            "3,0 a 3,9": "Pontos de aten√ß√£o ‚Äî fatores de estresse presentes",
            "< 3,0": "Risco alto de estresse e burnout ‚Äî requer plano de a√ß√£o"
        }
    };
}

// Fun√ß√£o para enviar ao RH
function sendToHR() {
    alert('Relat√≥rio enviado para o RH com sucesso!');
}

// Fun√ß√£o para gerenciar token do GitHub
function manageGitHubToken() {
    const currentToken = localStorage.getItem('github_token');
    
    if (currentToken) {
        const action = confirm(
            'üîê Token do GitHub configurado\n\n' +
            'Token atual: ' + currentToken.substring(0, 8) + '...\n\n' +
            'Clique OK para alterar o token\n' +
            'Clique Cancelar para remover o token'
        );
        
        if (action) {
            // Alterar token
            const newToken = prompt(
                'üîê Novo Token do GitHub\n\n' +
                'Digite o novo token:'
            );
            
            if (newToken && (newToken.startsWith('ghp_') || newToken.startsWith('gho_') || newToken.startsWith('ghu_'))) {
                localStorage.setItem('github_token', newToken);
                alert('‚úÖ Token alterado com sucesso!');
            } else if (newToken) {
                alert('‚ùå Token inv√°lido. Deve come√ßar com ghp_, gho_ ou ghu_');
            }
        } else {
            // Remover token
            localStorage.removeItem('github_token');
            alert('‚úÖ Token removido com sucesso!');
        }
    } else {
        // Configurar token pela primeira vez
        getGitHubToken().catch(error => {
            alert('‚ùå Erro ao configurar token: ' + error.message);
        });
    }
}

// Fun√ß√£o para reiniciar avalia√ß√£o
function restartEvaluation() {
    // Resetar vari√°veis
    currentStep = 0;
    currentQuestionIndex = 0;
    answers = {};
    
    // Resetar respostas
    for (let i = 0; i < totalQuestions; i++) {
        answers[i] = null;
    }
    
    // Voltar para a se√ß√£o home
    showSection('home');
}